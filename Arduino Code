#include <TimerOne.h>
#include <Wire.h>
#include <Adafruit_INA260.h>
#include <Adafruit_Sensor.h>
extern "C" { 
#include "utility/twi.h"  // from Wire library, so we can do bus scanning
}



#define TCAADDR 0x70
 
void tcaselect(uint8_t i) {
  if (i > 7) return;
 
  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i);
  Wire.endTransmission();  
}


Adafruit_INA260 ina260A = Adafruit_INA260();
Adafruit_INA260 ina260B = Adafruit_INA260();
Adafruit_INA260 ina260C = Adafruit_INA260();
Adafruit_INA260 ina260D = Adafruit_INA260();
Adafruit_INA260 ina260E = Adafruit_INA260();



     float   Isupply;
     float   Iinverter;
     float   Iconverter;
     float   Ibattery;
     float   Ipanel;
     float   Vsupply;
     float   Vinverter;
     float   Vconverter;
     float   Vpanel;
     float   Vbattery;
     int     LoadShare = 1;
     float   Dconverter;
     float   Idesired;
     float   Vdesired;
     bool    On = true;
     int     ledPin = 9;
     //TESTING
     float    VB = 0;
     float    IS = 0;

void setup() {
  // put your setup code here, to run once:
  
     //TESTING CODE INPUTS
     /*
     Iinverter = 4290;
     Iconverter = 3571;
     Ibattery = 8330;
     Ipanel = 8330;
     Isupply = 2;
     Vsupply = 24000;
     Vinverter = 28000;
     Vconverter = 28000;
     Vpanel = 12000;
     Vbattery = 13000;
     */
  
  
  int ledPin = 9;
  Timer1.initialize(100);
  Timer1.pwm(ledPin, 512);
  pinMode(ledPin, OUTPUT);  // sets the pin as output
  
  
  Serial.begin(9600);
  // Wait until serial port is opened
  while (!Serial) { delay(10); }


  Serial.println("Controls Test");
  //Serial.println("Adafruit INA260 Test");

   ina260A.begin(0x71);
   ina260B.begin(0x72);
   ina260C.begin(0x74);
   ina260D.begin(0x75);
   ina260E.begin(0x77);


  // Initialise the 1st sensor
  tcaselect(1);
  if(!ina260A.begin())
  {
    // There was a problem detecting the Sensor ... check your connections 
    Serial.println("Ooops, no Sensor detected ... Check your wiring!");
    while(1);
  }
  Serial.println("Found INA260 chip 1");

  
  // Initialise the 2nd sensor
  tcaselect(2);
  if(!ina260B.begin())
  {
    // There was a problem detecting the Sensor ... check your connections 
    Serial.println("Ooops, no Sensor detected ... Check your wiring!");
    while(1);
  }
  Serial.println("Found INA260 chip 2");

  
      // Initialise the 3rd sensor
  tcaselect(4);
  if(!ina260C.begin())
  {
    // There was a problem detecting the Sensor ... check your connections 
    Serial.println("Ooops, no Sensor detected ... Check your wiring!");
    while(1);
  }
  Serial.println("Found INA260 chip 3");
  
  
  // Initialise the 4th sensor
  tcaselect(5);
  if(!ina260D.begin())
  {
    // There was a problem detecting the Sensor ... check your connections 
    Serial.println("Ooops, no Sensor detected ... Check your wiring!");
    while(1);
  }
  Serial.println("Found INA260 chip 4");

  
  // Initialise the 5th sensor
  tcaselect(7);
  if(!ina260E.begin())
  {
    // There was a problem detecting the Sensor ... check your connections 
    Serial.println("Ooops, no Sensor detected ... Check your wiring!");
    while(1);
  }
  Serial.println("Found INA260 chip 5");

  
}

void loop() {
  // put your main code here, to run repeatedly:

    //TESTING INTERATIONS
    /*
    if (Vbattery > 12000)
    {
      Serial.println("Night-time");
      Ipanel = 0;
    }
    else
    {
      if (Vbattery >11500)
      {
        Serial.println("Low Power output");
        Ipanel = 8330;
        Vinverter = 10;
        Iinverter = 10;
      }
      else
      Ipanel = 8330;
      Vinverter = 28000;
      Iinverter = 4290;
    }

    
    Vbattery = Vbattery - VB;

    if (VB > 9000)
    {
      //Fault in system
      IS = 1;
    }

    Isupply = Isupply - IS;
  */
  
  //Sensor 1 Battery data

  delay(10);
  tcaselect(1);
    
  Serial.print("Battery Current: ");
  Ibattery = ina260A.readCurrent();
  Serial.print(Ibattery);
  Serial.println(" mA");
 
  Serial.print("Battery Bus Voltage: ");
  Vbattery = (ina260A.readBusVoltage());
  Serial.print(Vbattery);
  Serial.println(" mV");
 
  Serial.print("Battery Power: ");
  Serial.print((ina260A.readBusVoltage()*ina260A.readCurrent())/1000);
  Serial.println(" mW");
 
  Serial.println();


  //Sensor 2 Converter data
  tcaselect(2);
  
  Serial.print("Converter Current: ");
  Iconverter = ina260B.readCurrent();
  Serial.print(Iconverter);
  Serial.println(" mA");
 
  Serial.print("Converter Voltage: ");
  Vconverter = (ina260B.readBusVoltage());
  Serial.print(Vconverter);
  Serial.println(" mV");
 
  Serial.print("Converter Power: ");
  Serial.print((ina260B.readBusVoltage()*ina260B.readCurrent())/1000);
  Serial.println(" mW");
 
  Serial.println();

  //Sensor 3 Inverter data
  tcaselect(4);
    
  Serial.print("Inverter Current: ");
  Iinverter = ina260C.readCurrent();
  Serial.print(Iinverter);
  Serial.println(" mA");
 
  Serial.print("Inverter Voltage: ");
  Vinverter = (ina260C.readBusVoltage());
  Serial.print(Vinverter);
  Serial.println(" mV");
 
  Serial.print("Inverter Power: ");
  Serial.print((ina260C.readBusVoltage()*ina260C.readCurrent())/1000);
  Serial.println(" mW");
 
  Serial.println();


  //Sensor 4 Panel data
  tcaselect(5);
  
  Serial.print("Panel Current: ");
  Ipanel = ina260D.readCurrent();
  Serial.print(Ipanel);
  Serial.println(" mA");
 
  Serial.print("Panel Voltage: ");
  Vpanel = (ina260D.readBusVoltage());
  Serial.print(Vpanel);
  Serial.println(" mV/10");
 
  Serial.print("Panel Power: ");
  Serial.print((ina260D.readBusVoltage()*ina260D.readCurrent())/1000);
  Serial.println(" mW");
 
  Serial.println();

  //Sensor 5 supply data
  tcaselect(7);
  
  Serial.print("Supply Current: ");
  Isupply = ina260E.readCurrent();
  Serial.print(Isupply);
  Serial.println(" mA");
 
  Serial.print("Supply Voltage: ");
  Vsupply = (ina260E.readBusVoltage());
  Serial.print(Vsupply);
  Serial.println(" mV");
 
  Serial.print("Supply Power: ");
  Serial.print((ina260E.readBusVoltage()*ina260E.readCurrent())/1000);
  Serial.println(" mW");
 
  Serial.println();
  
  delay(1000);

  
    
    //Additional Night-time code 
    if(Ipanel < 100)
    {
      LoadShare = 1;
    }
    else
    {

  
    if (Vbattery >= 11000)                                          //First check, check for maximum power storage
    {                                                               //If the battery is fully charged, the battery
        LoadShare = 100;                                            //Will hold the entire load, which is sustainable
    }                                                               //As long as the solar panel is distributing excess power
    else
        if (Vbattery >= 11000 && Vbattery < 12000)                  //Once there is no more excess of energy and we start
        {                                                           //to actually tap into the stored energy in the battery
            LoadShare = 75;                                         //Loadhare will then go from 100% to 75%
        }
        else
            if (Vbattery < 11000 && Vbattery >= 8000)                //Once the battery is drained to between 90%
            {                                                       //and 70% the Loadshare percentage will be lowered to 50%
                LoadShare = 50;
            }
            else
                if (Vbattery >= 6000 && Vbattery < 8000)                //Once the battery is drained to between 70%
                {                                                      //and 50% the Loadshare percentage will be lowered to 35%
                    LoadShare = 35;
                }
                else
                    if (Vbattery > 4000 && Vbattery < 6000)             //Once the battery is drained to between 50%
                    {                                                  //and 33% the Loadshare percentage will be lowered to 25%
                        LoadShare = 25;
                    }
                    else
                        if (Vbattery <= 4000)                          //Once the battery is drained to 33% or lower then
                        {                                              //the Loadshare percentage will become 0% and the
                            LoadShare = 1;                             //grid will take the entire load
                        }
                        else
                            LoadShare = 1;                             //In the case where the algorithm gets lost for some reason
                                                                       //the grid will take over the load AKA when in doubt
                                                                       //have the grid take over the load.

    


    // Gives Duty Cycle of the converter based on loadshare value and Voltage needed to achieve that loadshare. 
    //
    // DC-DC CONVERTER IS NO LONGER CONTROLLED SIMPLY BY DUTY CYCLE, CODE BELOW WILL CHANGE
    // TO MATCH BLOCK DIAGRAM AS MENTIONED IN THE FINAL PRESENTATION AND FINAL REPORT
    //
    //Vout = Vin/(1-duty cycle)
    // Then,
    //duty cycle = 1 - (Vin/Vout)
    //Therefore, by setting Iout = (Loadshare %) * Iload, we get the desired current pulled from the battery
    //Assuming 0 < Duty cycle < 1
    //Below calculates the duty cycle in this way..  

    } //for additional Night-time code

    switch(LoadShare)
    {
    case 100:
        Vdesired = 28000;
        break;
    case 75:
        Vdesired = 26000;
        break;
    case 50:
        Vdesired = 24000;
        break;
    case 35:
        Vdesired = 23000;
        break;
    case 25:
        Vdesired = 22000;
        break;
    case 1:
        Vdesired = 0;
        break;
    default:
        Vdesired = 0;
        break;
    }
    
    if (Vbattery < 12000)
    {
      Vconverter = Vdesired;
    }

    float Dtest = (1-(Vbattery/Vdesired));

    if((Dtest > 0) && (Dtest < 1))               // Confirm 0 < Duty cycle < 1
    {
        Dconverter = Dtest;                                         // Set duty cycle
    }
    else
    {
        Dconverter = 0.01;
    }



    // If current is impossible to pull
    // let the grid handle it.
    analogWrite(ledPin, 512 * Dconverter); // Set PWM based on Dconverter
    
    delay(1000);

    // FEEDBACK CONTROLS:
    // Check feedback from the inverter and push current to match the inverter current

    int a;
    for(a = 0; a < 9; a++)
    {
        delay(10);
        if(Vconverter != Vdesired)
        {
          if (Dconverter > 0.05)
          {

                    if (Vconverter > Vdesired)
                    {
                        Dconverter = Dconverter - 0.025;
                    }
                    else
                    {
                        Dconverter = Dconverter + 0.025;
                    }

                    if (Vconverter < Vdesired)
                    {
                        Dconverter = Dconverter + 0.025;
                    }
                    else
                    {
                        Dconverter = Dconverter - 0.025;
                    }
          }

        }
    }
    
        //Double check if power sharing can match power needed
        if  ((Vinverter*Iinverter) < 100000)
        {
            Dconverter = 0.01;
        }

        // During a fault in the power system
        if (Isupply < 1)
        {
            if (Vbattery >= 6000)
            {
                Dconverter = 0.99;
            }
            else
                Dconverter = 0.01;
        }
        else



      analogWrite(ledPin, 255 * Dconverter); // Set PWM based on Dconverter
      Serial.println("LoadShare Value:");
      Serial.println(LoadShare);
      Serial.println("Duty Cycle:");
      Serial.println(Dconverter);

        
}
